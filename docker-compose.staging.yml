version: '3.8'
services:
    api:
        container_name: ${COMPOSE_PROJECT_NAME}-api
        build:
            context: .
            target: prod
            dockerfile: ./Dockerfile
            args:
                - TARGET_APP=api
                - DOWNLOADED_TRACKS_PATH=${DOWNLOADED_TRACKS_PATH}
                - CONVERTED_TRACKS_PATH=${CONVERTED_TRACKS_PATH}
        command: [ "node", "dist/apps/api/main" ]
        volumes:
            - downloaded-tracks:/usr/src/app/${DOWNLOADED_TRACKS_PATH}
            - converted-tracks:/usr/src/app/${CONVERTED_TRACKS_PATH}
        ports:
            - '${API_PORT}:${API_PORT}'
        env_file:
            - .env.staging
            - .env.secret
        environment:
            API_HOST: 0.0.0.0
            POSTGRES_HOST: pg-db
            YOUTUBE_DOWNLOADER_HOST: youtube-downloader
            FILE_CONVERTER_HOST: file-converter
        networks:
            - db
            - microservices
        depends_on:
            - pg-db
            - youtube-downloader
            - file-converter

    youtube-downloader:
        container_name: ${COMPOSE_PROJECT_NAME}-youtube-downloader
        build:
            context: .
            target: prod
            dockerfile: ./Dockerfile.ytdl
            args:
                - DOWNLOADED_TRACKS_PATH=${DOWNLOADED_TRACKS_PATH}
                - CONVERTED_TRACKS_PATH=${CONVERTED_TRACKS_PATH}
        volumes:
            - downloaded-tracks:/usr/src/app/${DOWNLOADED_TRACKS_PATH}
            - converted-tracks:/usr/src/app/${CONVERTED_TRACKS_PATH}
        ports:
            - '${YOUTUBE_DOWNLOADER_PORT}:${YOUTUBE_DOWNLOADER_PORT}'
        env_file:
            - .env.staging
            - .env.secret
        environment:
            YOUTUBE_DOWNLOADER_HOST: 0.0.0.0
        networks:
            - microservices

    file-converter:
        container_name: ${COMPOSE_PROJECT_NAME}-file-converter
        build:
            context: .
            target: prod
            dockerfile: ./Dockerfile
            args:
                - TARGET_APP=file-converter
                - DOWNLOADED_TRACKS_PATH=${DOWNLOADED_TRACKS_PATH}
                - CONVERTED_TRACKS_PATH=${CONVERTED_TRACKS_PATH}
        command: [ "node", "dist/apps/file-converter/main" ]
        volumes:
            - downloaded-tracks:/usr/src/app/${DOWNLOADED_TRACKS_PATH}
            - converted-tracks:/usr/src/app/${CONVERTED_TRACKS_PATH}
        ports:
            - '${FILE_CONVERTER_PORT}:${FILE_CONVERTER_PORT}'
        env_file:
            - .env.staging
            - .env.secret
        environment:
            FILE_CONVERTER_HOST: 0.0.0.0
        networks:
            - microservices

    pg-db:
        # TODO: specify ver
        image: postgres
        container_name: ${COMPOSE_PROJECT_NAME}-pg-db
        restart: unless-stopped
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        ports:
            - '${POSTGRES_PORT}:5432'
        volumes:
            - pg-db-data:/var/lib/postgresql/data
        networks:
            - db
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U postgres" ]
            interval: 10s
            timeout: 10s
            retries: 5
            start_period: 10s

volumes:
    downloaded-tracks:
        driver: local
    converted-tracks:
        driver: local
    pg-db-data:
        driver: local

networks:
    db:
        name: ${COMPOSE_PROJECT_NAME}-db
        driver: bridge
    microservices:
        name: ${COMPOSE_PROJECT_NAME}-microservices
        driver: bridge
