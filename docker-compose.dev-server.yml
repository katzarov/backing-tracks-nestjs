version: '3.8'
services:
    api:
        container_name: ${COMPOSE_PROJECT_NAME}-api
        build:
            context: .
            target: dev
            dockerfile: ./Dockerfile.api
        ports:
            - '${API_PORT}:${API_PORT}'
        volumes:
            - nodemodules:/usr/src/app/node_modules
            - .:/usr/src/app
        environment:
            API_HOST: 0.0.0.0
            POSTGRES_HOST: pg-db
            YTDL_HOST: ytdl
        networks:
            - db
            - microservices
        depends_on:
            - pg-db
            - ytdl

    ytdl:
        container_name: ${COMPOSE_PROJECT_NAME}-ytdl
        build:
            context: .
            target: dev
            dockerfile: ./Dockerfile.ytdl
        ports:
            - '${YTDL_PORT}:${YTDL_PORT}'
        volumes:
            - nodemodules:/usr/src/app/node_modules
            - .:/usr/src/app
        environment:
            YTDL_HOST: 0.0.0.0
        networks:
            - microservices

    pg-db:
        image: postgres:16
        container_name: ${COMPOSE_PROJECT_NAME}-pg-db
        restart: unless-stopped
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        ports:
            - '${POSTGRES_PORT}:5432'
        volumes:
            - pg-db-data:/var/lib/postgresql/data
        networks:
            - db
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U postgres" ]
            interval: 10s
            timeout: 10s
            retries: 5
            start_period: 10s
    # pg-admin:
    #     image: dpage/pgadmin4
    #     container_name: ${COMPOSE_PROJECT_NAME}-pgadmin4_container
    #     restart: unless-stopped
    #     environment:
    #         PGADMIN_DEFAULT_EMAIL: user-name@domain-name.com
    #         PGADMIN_DEFAULT_PASSWORD: strong-password
    #     ports:
    #         - '8888:80'
    #     volumes:
    #         - pg-admin-data:/var/lib/pgadmin
    #     depends_on:
    #         - pg-db
    #     networks:
    #         - db

volumes:
    pg-db-data:
        driver: local
    nodemodules:
        external: true
    # pg-admin-data:
    # driver: local

networks:
    db:
        name: ${COMPOSE_PROJECT_NAME}-db
        driver: bridge
    microservices:
        name: ${COMPOSE_PROJECT_NAME}-microservices
        driver: bridge
